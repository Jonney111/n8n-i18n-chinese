name: Build and Release n8n Chinese editor-ui

on:
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * *"
  push:
    branches:
      - master

jobs:
  build-editor-ui:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Enable pnpm via corepack
        run: corepack enable

      - name: Get latest release tag
        id: latest_release
        run: |
          LATEST=$(gh release list --repo n8n-io/n8n --limit 1 | awk '{print $1}')
          echo "latest=$LATEST" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if tag exists
        id: check_tag
        run: |
          TAG="${{ steps.latest_release.outputs.latest }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Clone n8n
        if: steps.check_tag.outputs.exists == 'false'
        run: git clone -b master --single-branch --filter=blob:none https://github.com/n8n-io/n8n ./n8n

      - name: check n8n editor-ui is old
        id: editorui_dir
        run: |
          DIR_PATH="./n8n/packages/frontend/editor-ui"
          FALLBACK_DIR="./n8n/packages/editor-ui"

          if [ -d "$DIR_PATH" ]; then
            echo "flag=new" >> $GITHUB_OUTPUT
            echo "dir=$DIR_PATH" >> $GITHUB_OUTPUT
          else
            echo "flag=old" >> $GITHUB_OUTPUT
            echo "dir=$FALLBACK_DIR" >> $GITHUB_OUTPUT
          fi

      - name: Move editor-ui i18n language
        if: steps.check_tag.outputs.exists == 'false'
        run: cp -r ./languages/* ${{ steps.editorui_dir.outputs.dir }}/@n8n/i18n/src/locales/

      - name: Patch New editor-ui
        if: steps.editorui_dir.outputs.flag == 'new' && steps.check_tag.outputs.exists == 'false'
        run: git apply ./fix_editor-ui.patch
        working-directory: ./n8n

      - name: Patch Old editor-ui
        if: steps.editorui_dir.outputs.flag == 'old' && steps.check_tag.outputs.exists == 'false'
        run: git apply ./fix_editor-ui.old.patch
        working-directory: ./n8n

      - name: Install dependencies
        run: pnpm install --ignore-scripts=false
        working-directory: ./n8n

      - name: Approve pnpm builds
        run: pnpm approve-builds
        working-directory: ./n8n

      - name: Pnpm build editor-ui
        if: steps.check_tag.outputs.exists == 'false'
        run: pnpm run build:n8n --filter=@n8n/editor-ui
        working-directory: ./n8n
        env:
          OPENAI_API_KEY: "dummy"

      - name: 打包 dist 产物
        if: steps.check_tag.outputs.exists == 'false'
        run: tar -czvf editor-ui.tar.gz dist
        working-directory: ${{ steps.editorui_dir.outputs.dir }}

      - name: 拷贝 dist 到项目目录
        if: steps.check_tag.outputs.exists == 'false'
        run: cp -r ${{ steps.editorui_dir.outputs.dir }}/dist ./editor-ui-dist

      - name: Update docker-compose.yml version
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          RAW_TAG="${{ steps.latest_release.outputs.latest }}"
          VERSION="${RAW_TAG#n8n@}"
          echo "Replacing {version} with $VERSION in docker-compose.yml"
          sed -i "s/{version}/$VERSION/g" ./docker-compose.yml

      - name: 创建 git tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          TAG="${{ steps.latest_release.outputs.latest }}"
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add -A
          git commit -m "chore: add built editor-ui dist for $TAG" || echo "No changes to commit"
          git tag $TAG
          git push origin $TAG || echo "Tag already exists, skipping push"
        working-directory: .

      - name: 创建 GitHub Release
        if: steps.check_tag.outputs.exists == 'false'
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.latest_release.outputs.latest }}
          name: Release editor-ui to ${{ steps.latest_release.outputs.latest }}
          body: |
            自动发布的中文语言包版本。
          draft: false
          prerelease: false
          files: ${{ steps.editorui_dir.outputs.dir }}/editor-ui.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
